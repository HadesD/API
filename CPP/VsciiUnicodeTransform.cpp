namespace Utils
{
  static const std::map<uint8_t, wchar_t> mapVisciiUnicode = {
    {0xA0, 0x00D5}, {0xC5, 0x0102}, {0xE5, 0x0103}, {0xF0, 0x0111}, {0xCE, 0x0128}, {0xEE, 0x0129},
    {0x9D, 0x0168}, {0xFB, 0x0169}, {0xB4, 0x01A0}, {0xBD, 0x01A1}, {0xBF, 0x01AF}, {0xDF, 0x01B0},
    {0x80, 0x1EA0}, {0xD5, 0x1EA1}, {0xC4, 0x1EA2}, {0xE4, 0x1EA3}, {0x84, 0x1EA4}, {0xA4, 0x1EA5},
    {0x85, 0x1EA6}, {0xA5, 0x1EA7}, {0x86, 0x1EA8}, {0xA6, 0x1EA9}, {0x06, 0x1EAA}, {0xE7, 0x1EAB},
    {0x87, 0x1EAC}, {0xA7, 0x1EAD}, {0x81, 0x1EAE}, {0xA1, 0x1EAF}, {0x82, 0x1EB0}, {0xA2, 0x1EB1},
    {0x02, 0x1EB2}, {0xC6, 0x1EB3}, {0x05, 0x1EB4}, {0xC7, 0x1EB5}, {0x83, 0x1EB6}, {0xA3, 0x1EB7},
    {0x89, 0x1EB8}, {0xA9, 0x1EB9}, {0xCB, 0x1EBA}, {0xEB, 0x1EBB}, {0x88, 0x1EBC}, {0xA8, 0x1EBD},
    {0x8A, 0x1EBE}, {0xAA, 0x1EBF}, {0x8B, 0x1EC0}, {0xAB, 0x1EC1}, {0x8C, 0x1EC2}, {0xAC, 0x1EC3},
    {0x8D, 0x1EC4}, {0xAD, 0x1EC5}, {0x8E, 0x1EC6}, {0xAE, 0x1EC7}, {0x9B, 0x1EC8}, {0xEF, 0x1EC9},
    {0x98, 0x1ECA}, {0xB8, 0x1ECB}, {0x9A, 0x1ECC}, {0xF7, 0x1ECD}, {0x99, 0x1ECE}, {0xF6, 0x1ECF},
    {0x8F, 0x1ED0}, {0xAF, 0x1ED1}, {0x90, 0x1ED2}, {0xB0, 0x1ED3}, {0x91, 0x1ED4}, {0xB1, 0x1ED5},
    {0x92, 0x1ED6}, {0xB2, 0x1ED7}, {0x93, 0x1ED8}, {0xB5, 0x1ED9}, {0x95, 0x1EDA}, {0xBE, 0x1EDB},
    {0x96, 0x1EDC}, {0xB6, 0x1EDD}, {0x97, 0x1EDE}, {0xB7, 0x1EDF}, {0xB3, 0x1EE0}, {0xDE, 0x1EE1},
    {0x94, 0x1EE2}, {0xFE, 0x1EE3}, {0x9E, 0x1EE4}, {0xF8, 0x1EE5}, {0x9C, 0x1EE6}, {0xFC, 0x1EE7},
    {0xBA, 0x1EE8}, {0xD1, 0x1EE9}, {0xBB, 0x1EEA}, {0xD7, 0x1EEB}, {0xBC, 0x1EEC}, {0xD8, 0x1EED},
    {0xFF, 0x1EEE}, {0xE6, 0x1EEF}, {0xB9, 0x1EF0}, {0xF1, 0x1EF1}, {0x9F, 0x1EF2}, {0xCF, 0x1EF3},
    {0x1E, 0x1EF4}, {0xDC, 0x1EF5}, {0x14, 0x1EF6}, {0xD6, 0x1EF7}, {0x19, 0x1EF8}, {0xDB, 0x1EF9},
  };

  static const std::map<wchar_t, uint8_t> mapUnicodeViscii = [](){
    auto output = decltype(mapUnicodeViscii){};

    for (decltype(mapVisciiUnicode)::const_iterator i = mapVisciiUnicode.cbegin(); i != mapVisciiUnicode.cend(); i++)
    {
      output[i->second] = i->first;
    }

    return output;
  }();

  // http://vietunicode.sourceforge.net/charset/
  QString convertVisciiToUnicode(const std::string& str)
  {
    QString convertedStr = QString::fromLocal8Bit(str.data());

    uint8_t mapKey;
    const auto strSize = str.size();
    for (auto i = decltype(strSize){0}; i < strSize; ++i)
    {
      mapKey = static_cast<uint8_t>(str[i]);
      if (mapVisciiUnicode.count(mapKey))
      {
        convertedStr[i] = mapVisciiUnicode.at(mapKey);
      }
    }

    return convertedStr;
  }
  std::string convertUnicodeToViscii(const std::string& str)
  {
    QString convertedStr = QString::fromUtf8(str.data());

    wchar_t mapKey;
    const auto strSize = convertedStr.size();
    for (auto i = decltype(strSize){0}; i < strSize; ++i)
    {
      mapKey = static_cast<wchar_t>(convertedStr[i].unicode());
      if (mapUnicodeViscii.count(mapKey))
      {
        convertedStr[i] = static_cast<wchar_t>(mapUnicodeViscii.at(mapKey));
      }
    }

    return convertedStr.toLocal8Bit().data();
  }
}
